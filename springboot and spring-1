Spring framework:

springboot works on spring framework. If we want to develop enterprise level framework in java , spring framwork is best.
before spring framwork Jakarta enterprise beans (Java beans), web App(struts),databases with ORM ,we use hibernate, 
now all in one called spring framework.Spring is a light weight framwork.it works with POJOs (the plain old java objects)
before , spring works only dependency injection. now it evolved.

Ioc and Di (Inversion of control and Dependency Injection):
A developer should create an object, controls an object and delete the object.....so,it is not needed to be taken care by developer always.
so,Ioc Container in Spring framework will take care of this. so, for example: if we have laptop and cpu ,2 objects are present in IOC container.
but, it should be linked by dependency injection(Design pattern).

when spring framework comes, It has a lot of configurations for even Hello world also.so, springboot arrives.springboot 3 works on spring 6.
Any object created or managed by spring is called beans.
If I add @Component annotation before any class .. it will create a object of the class in ioc container in jvm.
If we want it later from another class, we can call it by application context.
example:
@Component
public class Alien{
pubic void code(){
  System.out.println("hello...");
@Autowired
Laptop laptop;
}
}
public class solution{
public static void main(String[] args){
Alien obj=context.getBean(Alien.class)
obj.code();
}
}
This is called dependency injection.

if another class is there
public class Laptop{
public void laptop(){
System.out.println("Laptop");
}
}

if more than one object is linked , Autowired annotations is needed.

The old one of application context is bean factory.but now bean factory is deprecated/outdated from spring 6.

If we try the above code in spring, we have to create a ioc container by applicationcontext interface.There are so many ways .here we are trying 
By implement xml .... 
public class solution{
  public static void main(String[] args){
    ApplicationContext context=new ClassPathXmlApplicationContext("spring.xml"); // it will create all objects in xml file in this line itself
    Alien obj=(Alien)context.getBean("alien");
    obj.code();

     Alien obj2=(Alien)context.getBean("alien");
    obj2.code(); // even if i call second time, the same object is called..so,it is singleton.
}
}
we have to create a xml file , so, put xml file name inside context..it will create a file.
And open the file and add what is going to be my bean/object by adding the definition of bean and the structure is below...
<bean id="alien" class="com.example.alien">
</bean>
id is optional, 
If we want to create more objects , we want to change the scope...by default it is singleton(one obj is called by multiple times) , if we change it to 
scope="prototype", then it is created many objects(number of times , it is called).

Prototype:-

public class solution{
  public static void main(String[] args){
    ApplicationContext context=new ClassPathXmlApplicationContext("spring.xml"); // it will create all objects in xml file in this line itself if it is singleton
//if it is prototype, the obj will be created , when getBean() is called..
    Alien obj=(Alien)context.getBean("alien");
    obj.age=21;
    obj.code();
System.out.println(obj.age);  //21

     Alien obj2=(Alien)context.getBean("alien");
    obj2.code(); // even if i call second time, the same object is called..so,it is singleton.
System.out.println(obj2.age); //0 (since it is prototype, new object value is printed)
//if it singleton, 21 will be printed.
}
}

public class Alien{
int age;
pubic void code(){
  System.out.println("hello...");
}
}

Setter Injections:-
In bean, we have to add the property and set the value..
<bean id="alien" class="com.example.alien">
<property name="age" value="21">
</property>
</bean>

public class Alien{
private int age; //since it is private,add getters and setters
private Laptop lap;
public void setLap(int lap){
    this.lap=lap;
}
public lap getLap(){
    return lap;
}
public void setAge(int age){
    this.age=age;
}
public int getAge(){
  return age;
}
pubic void code(){
  System.out.println("hello...");
}
}

Reference Attribute:-
if it is primitive value, in bean , i have to use value , if it is a refernce, i have to use ref.
<bean id="alien" class="com.example.alien">
<property name="age" value="21"></property>
<property name="laptop" ref="lap1"></property>  //id and ref should be same
</bean>
<bean id="lap1 class="com.example.laptop"> </bean>

Constructor Injection:-
public class Alien{
private int age; //since it is private,add getters and setters
private Laptop lap;
public void Alien(int age,Laptop lap){
    this.age=age;
    this.lap=lap;
}
}

<bean id="alien" class="com.example.alien">
<constructor-arg type="com.example.alien" ref="lap"/>  //it will work only if 2 arguments are different type,if 2 args are same types, 
//remove type,put index=0, index=1 or name can also be used
<constructor-arg type="int" value="21"/>  
</bean>

