Authentication and Authorization in Web Development
Authentication and Authorization are two critical aspects of security in web applications. They are often used together but refer to different concepts:

1. Authentication
Definition: Authentication is the process of verifying the identity of a user, system, or service. It ensures that the entity requesting access is 
who it claims to be.
Goal: To check if the user is who they say they are.
Authentication Methods

1.Basic Authentication
How it works: The client sends the username and password in an HTTP header.
Usage: Typically used for simple applications or during development.
Example:
Header: Authorization: Basic base64(username:password)

2.Token-Based Authentication (e.g., JWT)
How it works: The client sends a token (usually a JWT - JSON Web Token) in the request header. The server validates the token to authenticate the user.
Usage: Used for modern web applications, especially those with a stateless architecture (like SPAs).
Example:
Header: Authorization: Bearer <JWT_token>

3.OAuth
How it works: OAuth is a delegation protocol where the user authorizes a third-party application to access their resources without sharing their password. It uses tokens for access.
Usage: Common in applications that integrate with external services (e.g., logging in with Google or Facebook).
Example: OAuth 2.0 is used in social logins (Google, Facebook, etc.).

4.Session-Based Authentication
How it works: After a user logs in, the server creates a session and stores the session identifier (session ID) in a cookie. The client sends the cookie with each request to authenticate.
Usage: Traditional web apps where the server manages user sessions.
Example:
Cookie: JSESSIONID=abcd1234

2. Authorization
Definition: Authorization is the process of determining what actions or resources an authenticated user is allowed to access. It checks the permissions and roles associated with the authenticated user.
Goal: To decide what the user is allowed to do after being authenticated.
Authorization Methods.

1.Role-Based Access Control (RBAC)
How it works: Users are assigned roles, and each role has specific permissions. The system checks the user's role before granting access to resources.
Example:
Admin: Full access to all resources.
User: Read-only access to some resources.

2.Attribute-Based Access Control (ABAC)
How it works: Permissions are granted based on the attributes of the user, environment, and resource. It provides more fine-grained control than RBAC.
Example: A user with a certain department attribute may only access resources associated with their department.

3.Access Control Lists (ACL)
How it works: ACLs specify which users or groups have access to which resources and what kind of access (read, write, execute, etc.) they have.
Example: A file might have an ACL specifying that User1 can read it, and User2 can both read and write it.

4.Scope-Based Authorization (OAuth 2.0)
How it works: In OAuth, the access token includes scopes that define what actions the user is allowed to perform on resources (e.g., read, write, update).
Example: A user may grant an app permission to "read" their calendar but not "write" to it.
Authentication and Authorization in Practice
Spring Security (Example)
Spring Security provides a comprehensive framework for authentication and authorization in Java-based web applications.

Step 1: Authentication
1. Username/Password Authentication: Using Spring Security's built-in UsernamePasswordAuthenticationFilter, the credentials are sent in the request body or header, 
and Spring Security authenticates them against a database or another authentication provider.


@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
            .withUser("user").password("{noop}password").roles("USER")
            .and()
            .withUser("admin").password("{noop}admin").roles("ADMIN");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers("/admin/**").hasRole("ADMIN")
            .antMatchers("/user/**").hasRole("USER")
            .anyRequest().authenticated()
            .and()
            .formLogin();
    }
}
Explanation:
This configuration allows two users: user and admin with different roles.
The /admin/** URL is restricted to users with the role ADMIN, and /user/** is restricted to USER.

Step 2: Authorization

2. Role-Based Access Control (RBAC): In the above configuration, the roles (USER, ADMIN) are used to determine what URLs the users can access.
For example:
A user with the role ADMIN can access /admin/**.
A user with the role USER can access /user/**.
Step 3: Token-Based Authentication (JWT)
Using JWT for Authentication: After the user logs in, they receive a JWT token that must be included in subsequent requests for authentication.

Login Endpoint - Generates JWT:

java
Copy code
@PostMapping("/login")
public String login(@RequestBody UserLoginRequest request) {
    // Authenticate user (check username and password)
    if (isValidUser(request)) {
        return jwtService.generateToken(request.getUsername());
    }
    throw new UnauthorizedException("Invalid credentials");
}
Secured Endpoint - Verifies JWT:

java
Copy code
@GetMapping("/user")
public String getUserDetails(@RequestHeader("Authorization") String token) {
    if (jwtService.isValid(token)) {
        return "User details";
    }
    throw new UnauthorizedException("Invalid token");
}
JWT Service - Utility methods to generate and verify the token:

java
Copy code
public class JwtService {
    private static final String SECRET_KEY = "your-secret-key";
    
    public String generateToken(String username) {
        return Jwts.builder()
            .setSubject(username)
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + 60000))
            .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
            .compact();
    }
    
    public boolean isValid(String token) {
        try {
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
Explanation:
The user authenticates by sending a username and password.
If valid, the server returns a JWT token, which is used for future requests.
The server verifies the token on each request to ensure the user is authenticated.
Difference Between Authentication and Authorization
Authentication: Verifies who the user is (e.g., username/password, token).
Authorization: Determines what the user can do (e.g., which resources they can access).
Postman Example
1. Authentication with JWT Token:

Login API (POST /login):

Request Body:
json
Copy code
{
  "username": "user",
  "password": "password"
}
Response:

json
Copy code
{
  "token": "your_jwt_token"
}
2. Authorization with JWT Token:

Secured API (GET /user):

Request Header:
plaintext
Copy code
Authorization: Bearer your_jwt_token
Response (If token is valid):

json
Copy code
{
  "message": "User details"
}
